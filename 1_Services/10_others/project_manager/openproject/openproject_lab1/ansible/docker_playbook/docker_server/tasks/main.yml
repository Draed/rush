---
# Description : configure docker service
# file : main.yml
# from : https://docs.docker.com/engine/security/rootless/

# For Debian 10 (rootless prerequistes) 
- name: configure kernel.unprivileged_userns_clone in /etc/sysctl.conf
  ansible.builtin.lineinfile:
    path: /etc/sysctl.conf
    regexp: '^kernel.unprivileged_userns_clone='
    line: kernel.unprivileged_userns_clone=1
  when: ansible_distribution == 'Debian' and ansible_distribution_version <= '10'

# wait for kernel 5.11 to activate this on order to prevent non stable behaviour
# - name: Using overlay2 storage driver with Debian-specific modprobe
#   community.general.modprobe:
#     name: overlay
#     state: present
#     params: 'permit_mounts_in_userns=1'

# we become sudo here, to delete rootfull docker
- name: Make sure old docker instance are stopped and disabled
  become: yes
  ansible.builtin.systemd:
    name: docker
    state: stopped
    enabled: no
  ignore_errors: True

# if any instance of docker is running kill it 
# sudo systemctl disable --now docker.service docker.socket
# - name: disable previous docker.service and docker.socket
#   ansible.builtin.command: systemctl disable --now docker.service docker.socket
  
- name: disable previous docker.service and docker.socket
  become: yes
  service:
    name: "{{ item }}"
    enabled: no
    state: stopped
  ignore_errors: True
  with_items:
    - docker.service
    - docker.socket


# remove old docker package if exist
# apt-get remove docker docker-engine docker.io containerd runc
- name: Make sure old docker package are remove (with apt)
  become: yes
  ansible.builtin.apt:
    name: "{{ docker_remove_package_list }}"
    state: absent
    autoremove: yes
    autoclean: yes

# install docker rootles with script
# as it is currently the only approach for Raspbian
# see : https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script
- name: install docker CE rootless with script
  block:
  
  # - name: Get user
  #   ansible.builtin.shell: whoami
  #   register: result1

  # - name: User data
  #   ansible.builtin.debug:
  #     var: result1

  - name: Create the script destination directory if it does not exist
    ansible.builtin.file:
      path: "/home/{{ user }}/downloads"
      state: directory
      mode: '0744'
      owner: "{{ user }}"
  
  - name: Get the script 
    ansible.builtin.get_url:
      url: https://get.docker.com/rootless
      dest: "/home/{{ user }}/downloads/docker_rootless.sh"
      checksum: sha512:8f1730ecd01c50e1b8a9090d64d426c98457412b97f40ef78a813cd3052d1e615db39d3b93d5c1fa3be675595f4d8b81ec955e53cc2c5dd16cf80be65909500f
      mode: '0700'
      owner: "{{ user }}"

  - name: launch the script
    ansible.builtin.shell: "/home/{{ user }}/downloads/docker_rootless.sh"

- name: make docker daemon start at login
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: yes
    scope: user

# - name: configure docker client for (this) the server (temporary)
#   ansible.builtin.shell: "export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock"

- name: configure docker client for (this) the server (permanent)
  ansible.builtin.lineinfile:
    path: /home/{{ user }}/.bashrc
    line: export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock
    state: present

# install dependancies in order to apply limitation (CPU and RAM on docker)
- import_tasks: _docker_ressource_limitation.yml
  tags: [_docker_ressource_limitation]